<div class="w-full flex-1">
  <!-- <#Icon
    iconify="carbon:subnet-acl-rules"
    class="w-5 h-5 mx-1 mt-2 shrink-0 text-base-content/70"
  /> -->

  <div class="flex flex-col relative h-full multiselect_in_composer flex-1 min-h-[376px]">
    {#if @is_caretaker}
      <Bonfire.UI.Common.MultiselectLive
        :if={!@read_only}
        implementation={:live_select}
        form_input_name={__MODULE__}
        class="input-bordered text-sm rounded-full w-full input liveselect"
        preloaded_options={results_for_multiselect(@my_circles)}
        label={l("Add circles or people")}
      />
      <!-- <div class="flex items-center mt-5 justify-between">
        <div class="font-semibold text-base-content/90 text-base">{l("Custom permissions")}</div>
        <button
          :if={@showing_within in [:smart_input]}
          type="button"
          phx-click={JS.toggle(to: "#extra_boundaries") |> JS.toggle(to: "#roles_detail")}
          class="link link-hover text-sm flex items-center gap-2"
        >
          <#Icon iconify="mingcute:hat-fill" class="w-4 h-4" />
          <span>{l("View roles")}</span>
        </button>
      </div> -->
      <div class="flex h-full flex-1 flex-col gap-2">
        {#if !@custom_acls}
          <div class="">
            <Bonfire.Boundaries.Web.BoundaryItemsLive
              to_boundaries={[]}
              circles={@to_circles}
              roles_for_dropdown={@roles_for_dropdown
              |> Enum.reject(fn
                {"cannot_" <> _, _} -> true
                {key, _} -> String.starts_with?(to_string(key), "cannot_")
              end)}
            >
              <button
                :if={@showing_within in [:smart_input]}
                type="button"
                phx-click={JS.toggle(to: "#extra_boundaries") |> JS.toggle(to: "#roles_detail")}
                class="link link-hover text-sm flex items-center gap-2"
              >
                <#Icon iconify="mingcute:hat-fill" class="w-4 h-4" />
              </button>
            </Bonfire.Boundaries.Web.BoundaryItemsLive>

            <div class="flex mt-3 justify-between items-center">
              <Bonfire.UI.Common.ProfileItemLive
                avatar_class="w-9 h-9 rounded-full bg-base-100"
                profile={e(current_user(@__context__), :profile, nil)}
                character={e(current_user(@__context__), :character, nil)}
                show_controls={[]}
              />
              <div class="btn btn-sm btn-disabled rounded-full normal-case">{l("Caretaker")}</div>
            </div>
          </div>

          <div class="collapse !overflow-visible collapse-arrow bg-error/10 mt-2">
            <input type="radio" checked={@exclude_circles != []}>
            <div class="collapse-title text-sm font-medium">
              <div class="flex items-center gap-3 text-error">
                <span class="w-8 h-8 bg-error/10 rounded-full flex items-center place-content-center">
                  <#Icon iconify="mingcute:user-remove-2-fill" class="w-5 h-5 text-error" />
                </span>
                <span>{l("Exclude users or circles")}</span>
              </div>
            </div>
            <div class="collapse-content">
              <Bonfire.UI.Common.MultiselectLive
                :if={!@read_only}
                implementation={:live_select}
                form_input_name={Bonfire.Boundaries.Web.ExcludeBoundaries}
                preloaded_options={results_for_multiselect(@my_circles, :exclude_circles)}
                label={l("Select or search for circles or people to exclude")}
              />

              <Bonfire.Boundaries.Web.BoundaryItemsLive
                to_boundaries={[]}
                circles={@exclude_circles}
                roles_for_dropdown={@roles_for_dropdown
                |> Enum.filter(fn
                  {"cannot_" <> _, _} -> true
                  {key, _} -> String.starts_with?(to_string(key), "cannot_")
                end)}
              />
            </div>
          </div>
        {#else}
          <div :for={acl <- @custom_acls}>
            <Bonfire.Boundaries.Web.AclLive
              id={"set_acl_#{id(acl)}"}
              setting_boundaries
              acl_id={id(acl)}
              acl={acl}
            />
          </div>
        {/if}
      </div>
    {/if}

    <!-- <div class="flex gap-2 py-2 scrollable">
        {#for acl <- Bonfire.Boundaries.Acls.list_my(current_user(@__context__))
          |> Enum.map(fn
            %Bonfire.Data.AccessControl.Acl{} = acl ->
            %{
              id: e(acl, :id, nil),
              field: :to_boundaries,
              name: e(acl, :named, :name, nil) || e(acl, :sterotyped, :named, :name, nil)
            } end)
          |> Enum.filter(fn acl -> acl[:name] != nil end)
        }
          <button 
            :key={e(acl, :id, nil)}
            type="button" 
            class="btn hover:bg-base-content hover:!text-base-300 btn-xs !max-h-[1.75rem] !min-h-[1.75rem] !h-[1.75rem] rounded font-normal capitalize bg-base-content/10 text-base-content/70 feed_tab border-none">
            {e(acl, :name, nil)}
          </button>
        {/for}
      </div> -->
    <!-- </div> -->

    <!-- <Bonfire.UI.Common.ProfileItemLive
      wrapper_class="flex items-center justify-between"
      profile={e(current_user(@__context__), :profile, %{name: l("Me")})}
      character={e(current_user(@__context__), :character, nil)}
      show_controls={[]}
    >
      <div class="flex items-center gap-2">
        <button disabled class="normal-case btn btn-sm btn-outline btn-disabled">{l("Caretaker")}</button>
      </div>
    </Bonfire.UI.Common.ProfileItemLive> -->

    <!-- Next already-choosen boundaries or Circles/Users -->
    <!-- <Bonfire.Boundaries.Web.BoundariesGeneralAccessLive boundary_preset={@boundary_preset} /> -->
    <!-- </div>
</div> -->

    <!-- <div class="mt-4 mb-3">
      <div class="font-semibold text-base-content/90 text-base">{l("Preset boundary")}</div>

      <div class="flex items-center w-full mt-4 gap-3">
        <div class="flex items-center w-full flex-1 justify-between">
          <span class="flex items-center gap-2 text-sm font-semibold tracking-wider text-center text-base-content">
            <Bonfire.Boundaries.Web.BoundariesPresetNameLive
              boundary_preset={@boundary_preset}
              icon_wrapper="w-10 h-10 rounded-full flex items-center place-content-center bg-info/10"
              icon_class="w-6 h-6 text-info"
              with_description
              to_boundaries={@to_boundaries}
            /></span>
          <div>
            <div :if={@showing_within in [:smart_input]} class="dropdown dropdown-end dropdown-top">
              <label
                tabindex="0"
                class="btn btn-sm !border-base-content/30 !border btn-outline rounded-full normal-case"
              >{l("Change")}</label>
              <div tabindex="0">
                <Bonfire.Boundaries.Web.BoundariesGeneralAccessLive
                  boundary_preset={@boundary_preset}
                  to_boundaries={@to_boundaries}
                  is_dropdown
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div> -->

    <Bonfire.Boundaries.Web.BoundaryComposerActionsLive :if={@showing_within in [:smart_input] && @is_caretaker} />
  </div>
</div>