{#if Enum.empty?(@circles)}
  {!-- <Bonfire.UI.Common.EmptyFeed
    feedback_title={l("Grant custom permissions")}
    feedback_message={l("Here you can grant specific permissions to one or more users or circles.")}
  /> --}

  {!-- <div class="text-center  p-4 font-medium bg-base-200 rounded-box my-2">{"Grant custom permissions to specific users or circles"}</div> --}
{#else}
  <div class="flex flex-1 flex-col flex-wrap">
    <div :for={{data, role} <- @circles || []} class="flex py-2 items-center w-full justify-between">
      {#case debug(data, "idata")}
        {#match %{profile: profile, character: character} when not is_nil(profile)}
          <Bonfire.UI.Common.ProfileItemLive
            avatar_class="w-9 h-9 rounded-full bg-base-100"
            profile={profile}
            character={character}
            show_controls={[]}
          />
        {#match %{"icon" => _}}
          <Bonfire.UI.Common.ProfileItemLive
            avatar_class="w-9 h-9 rounded-full bg-base-100"
            profile={data}
            character={data}
            show_controls={[]}
          />
        {#match _ when is_binary(data)}
          <div class="flex items-center gap-3 grow">
            <span class="w-8 h-8 rounded-full bg-base-content/10 flex items-center place-content-center">
              <#Icon iconify="fluent:people-list-16-filled" class="inline-block w-5 h-5 text-base-content/70" />
            </span>
            <div class="text-base font-medium text-base-content truncate max-w-[210px]">{data}</div>
          </div>
        {#match _}
          <div class="flex items-center gap-3 grow">
            <span class="w-8 h-8 rounded-full bg-base-content/10 flex items-center place-content-center">
              <#Icon iconify="fluent:people-list-16-filled" class="inline-block w-5 h-5 text-base-content/70" />
            </span>
            <div class="text-sm font-bold group-hover:underline text-base-content">{name(data) ||
                l("Unknown circle or user")}</div>
          </div>
      {/case}
      <div class="items-center flex gap-2">
        <div class="flex items-center gap-2" phx-update="ignore">
          <Bonfire.Boundaries.Web.RolesDropdownLive
            setting_boundaries
            circle_id={id(data)}
            role={role}
            roles={@roles_for_dropdown}
            field={@field}
          />
          <Bonfire.UI.Common.OpenModalLive
            reusable_modal_id={if @__context__[:sticky], do: "persistent_modal"}
            id={"explain_role#{id(data)}"}
            title_text={l("Role details")}
            no_actions
            open_btn_wrapper_class="flex flex-1 w-full"
          >
            <div class="border border-base-content/20 mt-4 rounded-box">
              <Bonfire.Boundaries.Web.YourRoleLive
                is_caretaker={nil}
                role_permissions={acls_from_role(role)}
                role_name={role}
                label={l("")}
                scope={:preview}
              />

              {!-- <ul :if={@preview_boundary_verbs} role="list" class="p-3 flex gap-3 flex-wrap">
                {#for verb <- @preview_boundary_verbs || []}
                  <Bonfire.Boundaries.Web.RoleVerbLive mini value read_only verb={verb} all_verbs={@all_verbs} />
                {/for}
              </ul> --}
            </div>

            <:open_btn>
              <button type="button" class="btn btn-sm btn-circle btn-ghost" aria-label="Add description">
                <#Icon iconify="heroicons-outline:information-circle" class="w-4 h-4 text-base-content/70" />
              </button>
              {!-- <input type="hidden" name={"upload_metadata[#{entry.ref}][label]"} value={value}> --}
            </:open_btn>
          </Bonfire.UI.Common.OpenModalLive>
        </div>

        {!-- <div
          :if={e(data, :type, nil) == "user"}
          phx-click={JS.hide(to: "#boundaries_picker")
          |> JS.hide(to: "#extra_boundaries")
          |> JS.show(to: "#boundaries_preview")
          |> JS.push("assign",
            value: %{
              preview_boundary_for_id: id(data),
              preview_boundary_for_username: name(data)
            },
            target: "#boundaries_preview"
          )}
          class="btn btn-sm btn-circle btn-ghost"
        >
          <#Icon iconify="heroicons-outline:eye" class="w-5 h-5 md:w-4 md:h-4" />
        </div> --}

        <div
          phx-click={JS.push("Bonfire.Boundaries:remove_circle",
            value: %{
              id: id(data),
              field: @field,
              name: name(data)
            },
            target: "#smart_input"
          )}
          class="btn btn-sm btn-circle btn-ghost"
        >
          <#Icon iconify="ph:trash-fill" class="w-5 h-5 text-error/80 md:w-4 md:h-4" />
        </div>
      </div>
    </div>
  </div>
{/if}