<div>
  {#if @section == "new_circle"}
    <Bonfire.Boundaries.Web.NewCircleLive
      parent_back={@myself}
      event_target={@myself}
      setting_boundaries={@setting_boundaries}
    />
  {#elseif @edit_circle_id}
    <Bonfire.Boundaries.Web.CircleLive
      id={@edit_circle_id}
      circle_id={@edit_circle_id}
      parent_back={@myself}
      setting_boundaries={@setting_boundaries}
    />
  {#else}
    <div :if={!@setting_boundaries} class="">
      <div class="flex items-center">
        <div class="flex items-center flex-1 space-x-2 text-lg font-medium text-base-content">
          <div
            :if={@parent_back}
            phx-click="back"
            phx-target={@parent_back}
            x-on:click="show_boundary_list = true"
            class="btn btn-ghost btn-sm btn-circle"
          >
            <Icon solid="ChevronLeft" class="w-6 h-6 text-base-content/80" />
          </div>

          <div class="flex space-x-2 items-top">
            <span class="text-xl" aria-label="boundary icon">{e(@acl, :extra_info, :info, :icon, "ðŸ›¡")}</span>
            <div class="">
              <div>{e(@acl, :named, :name, nil) || e(@acl, :stereotyped, :named, :name, nil) ||
                  l("Untitled boundary")}</div>
              <div class="text-sm font-normal text-base-content/80">{e(@acl, :extra_info, :summary, nil)}</div>
            </div>
          </div>
        </div>
        <div
          :if={@section != "settings" and !@read_only}
          href={"/boundaries/acl/#{ulid(@acl)}/settings"}
          phx-click="assign"
          phx-value-section="settings"
          phx-target={@myself}
          class="flex items-center space-x-1 text-sm font-medium normal-case btn btn-sm btn-ghost"
        >
          <Icon outline="Cog" class="w-4 h-4" />
          <span>{l("Settings")}</span>
        </div>

        <div
          :if={@section == "settings"}
          to={~p"/boundaries/acl/#{ulid(@acl)}"}
          phx-click="assign"
          phx-value-section="permissions"
          phx-target={@myself}
          class="flex items-center space-x-1 text-sm font-medium normal-case btn btn-sm btn-ghost"
        >
          <Icon outline="ChevronLeft" class="w-4 h-4" />
          <span>{l("Back")}</span>
        </div>
      </div>
    </div>

    <div class="mt-4">
      <div :if={@section != "settings"}>
        <div :if={!@read_only} class="">
          <!-- <div class="flex items-center justify-between">
            <h2 class="flex-1 text-xs font-medium tracking-wider uppercase text-base-content/80">{l("Permissions")}</h2>
            <div
              :on-click="assign"
              phx-value-section="new_circle"
              class="normal-case btn btn-secondary btn-sm"
              >
              {l("Define a new circle")}
            </div>
          </div> -->
          <!-- <div class="flex items-center mt-3 space-x-2">
          <span 
            :for={subject <- @subjects}
            class="inline-flex rounded-full items-center py-0.5 pl-2.5 pr-1 text-sm font-medium bg-info text-info-content">
            <span class="text-sm">{LiveHandler.subject_name(subject)}</span>
            <span 
              :if={!@read_only} 
              phx-click="remove_from_acl"
              phx-value-subject_id={ulid(subject)}
              phx-target={@myself}
              class="flex-shrink-0 ml-0.5 h-4 w-4 rounded-full inline-flex items-center justify-center text-info-content hover:bg-info-content/30 hover:text-info-content/80 focus:outline-none focus:bg-info-content/80 focus:text-white">
              <Icon solid="X" class="w-4 h-4" />
            </span>
          </span>
        </div> -->

          <div>
            <div class="flex items-center my-4">
              <div class="flex-1">
                <form :on-change="select">
                  <Bonfire.UI.Common.MultiselectLive
                    implementation={:live_select}
                    form_input_name={__MODULE__}
                    label={l("Search for circles or users to add")}
                  /></form>
                <!-- <div class="flex-1" id={:select_more_acl} phx-update="ignore" phx-hook="InputOrSelectOne">
                  <input
                    value={predefined_subjects(@subjects)}
                    placeholder={l("Add more users or circles")}
                    name="add"
                    id="acl_tagify"
                    class="w-full border tagify--outside tagify !border-base-content/10"
                  />
                   <select class="tagify hide">
                    {#for {id, name} <- @suggestions}
                      <option class="" value={id}>{name}</option>
                    {/for}
                  </select>
                </div> -->
              </div>
            </div>
          </div>
        </div>

        {#if is_list(@list_by_subject) or (is_map(@list_by_subject) and not Enum.empty?(@list_by_subject))}
          <!-- <div class="text-xl font-medium collapse-title">
            Role per circle or person
          </div> -->
          <form :on-change="edit_grant_role">
            <h2 class="flex-1 my-4 text-xs font-medium tracking-wider uppercase text-base-content/80">{l("Permissions")}</h2>
            <ul class="flex flex-col gap-4">
              <li
                :for={{{subject_id, %{subject: subject, verb_grants: verb_grants} = subject_verb_grant}, i} <-
                  Enum.with_index(@list_by_subject || [])}
                class="flex items-center justify-between"
              >
                {#if e(subject, :profile, :id, nil)}
                  <Bonfire.UI.Common.ProfileItemLive
                    profile={e(subject, :profile, nil)}
                    character={e(subject, :character, nil)}
                    show_controls={[]}
                  />
                {#else}
                  <div class="flex items-center gap-3">
                    <span class="flex items-center w-10 h-10 rounded place-content-center bg-base-content/5">
                      <Icon iconify="bx:shape-circle" class="inline-block w-5 h-5 text-base-content/70" />
                    </span>
                    <div class="text-sm font-medium text-base-content">{LiveHandler.subject_name(subject)}</div>
                  </div>
                {/if}

                <div class="flex items-center gap-2" :if={!@read_only}>
                  <Bonfire.Boundaries.Web.RolesDropdownLive
                    circle_id={subject_id}
                    role={Bonfire.Boundaries.Verbs.role_from_verb_ids(Map.keys(verb_grants || %{}))
                    |> debug("role_from_verbs")}
                    extra_roles={[{:custom, l("Custom")}]}
                    no_actions
                  />
                  <div class="dropdown dropdown-end">
                    <label tabindex="0" class="btn btn-square btn-ghost btn-sm">
                      <Icon solid="DotsHorizontal" class="w-4 h-4" />
                    </label>
                    <ul
                      tabindex="0"
                      class="p-2 shadow dropdown-content menu menu-compact bg-neutral rounded-box w-52"
                    >
                      <li :if={!@setting_boundaries}>
                        <Bonfire.UI.Common.OpenModalLive
                          reusable_modal_id={if @__context__[:sticky], do: "persistent_modal"}
                          id={"modal-verbs-#{subject_id}"}
                          title_text={l("Role details (or customise permissions)")}
                        >
                          <div class="mt-4">
                            <div class={"grid w-full grid-cols-1 md:grid-cols-#{columns(@__context__)} gap-3 p-3"}>
                              {#for {verb_id, l} <- Enum.concat(verb_grants || [], @verbs || []) |> Enum.uniq_by(&elem(&1, 0))}
                                <div class="col-span-1 rounded shadow-lg border-base-content/10 bg-base-content/5">
                                  <div class="flex-1 rounded">
                                    <div class="flex items-center p-2 space-x-2 bg-base-content/5">
                                      {#case Bonfire.Boundaries.Verbs.get(verb_id)}
                                        {#match nil}
                                        {#match verb}
                                          <span class="tooltip" data-tip={e(verb, :summary, nil)}>
                                            <Icon
                                              iconify={e(verb, :icon, "Heroicons-Solid:QuestionMarkCircle")}
                                              class="w-4 h-4 text-base-content/70"
                                              fill="currentColor"
                                            />
                                          </span>
                                      {/case}

                                      <div class="flex-1 font-medium">
                                        {e(l, :verb, :verb, nil) || e(l, :verb, nil)}
                                      </div>
                                    </div>
                                  </div>

                                  <div class="flex items-end px-2 py-1 mt-px">
                                    <Bonfire.Boundaries.Web.YesMaybeFalseLive
                                      value={e(l, :value, nil)}
                                      field_name={"subject[#{subject_id}][#{verb_id}]"}
                                      event_target={@myself}
                                    />
                                  </div>
                                </div>
                              {/for}
                            </div>
                          </div>
                          <:open_btn>
                            <button type="button" class="text-neutral-content">
                              {l("Details")}
                            </button>
                          </:open_btn>
                        </Bonfire.UI.Common.OpenModalLive>
                      </li>
                      <li>
                        <button
                          phx-click="remove_from_acl"
                          phx-value-subject_id={subject_id}
                          phx-target={@myself}
                          class="text-neutral-content"
                          type="button"
                        >
                          {l("Remove")}
                        </button>
                      </li>
                    </ul>
                  </div>
                </div>
              </li>
            </ul>
          </form>
        {/if}
      </div>

      <section :if={@section == "settings"} role="tabpanel">
        <div class="pb-3 text-lg font-medium">{l("General")}</div>
        <form phx-submit="edit" phx-target={@myself} class="p-4 border rounded-lg border-base-content/10">
          <!-- <div
            x-data="{
            open: false,
            close(focusAfter) {
              if (! this.open) return
              this.open = false
              focusAfter && focusAfter.focus()
            }
          }"
            x-on:keydown.escape.prevent.stop="close($refs.button)"
            class="w-full form-control"
          >
            <label class="label">
              <span class="font-semibold label-text">{l("Edit the boundary emoji")}</span>
              <input
                name="extra_info[info][icon]"
                value={e(@acl, :extra_info, :info, :icon, "ðŸ”¥")}
                type="hidden"
              />
            </label>
            <div class="mt-1 sm:mt-0 sm:col-span-2">
              <div class="relative flex items-center">
                <span class="w-10 h-10 text-4xl text-gray-300">
                  {e(@acl, :extra_info, :info, :icon, "ðŸ›¡")}
                </span>
                <button x-on:click="open = ! open" type="button" class="ml-2 normal-case btn btn-sm btn-outline">{l("Pick an emoji")}</button>
                <div
                  x-ref="panel"
                  x-show="open"
                  x-transition.origin.top.left
                  x-on:click.outside="close($refs.button)"
                  x-show="open"
                  class="absolute z-40 top-12 left-3"
                  role="tooltip"
                >
                  <div id="boundary-picker" />
                </div>
              </div>
            </div>
          </div> -->

          <div class="w-full form-control">
            <label class="label">
              <span class="font-semibold label-text">{l("Edit the boundary name")}</span>
            </label>
            <div class="flex items-center">
              <input
                name="named[name]"
                value={e(@acl, :named, :name, nil)}
                type="text"
                placeholder="Type here"
                class="w-full input input-bordered"
              />
            </div>
          </div>

          <div class="w-full mt-4 form-control">
            <label class="label">
              <span class="font-semibold label-text">{l("Edit the boundary description")}</span>
            </label>
            <div class="flex flex-col space-y-3">
              <textarea
                name="extra_info[summary]"
                placeholder="A short description to help you remember what this boundary is about"
                rows="3"
                class="w-full h-24 textarea textarea-bordered"
              >{e(@acl, :extra_info, :summary, nil)}</textarea>
            </div>
          </div>
          <button type="submit" class="w-full mt-3 normal-case btn btn-primary">{l("Save")}</button>
        </form>
        <div :if={!e(@acl, :stereotyped, nil)} class="pb-3 mt-6 text-lg font-medium">{l("Danger zone")}</div>
        <div :if={!e(@acl, :stereotyped, nil)} class="p-4 border rounded-lg bg-error/5 border-error/30">
          <!-- <div class="flex items-center space-x-8">
          <div class="flex flex-col">
            <div class="flex-1 text-base font-bold">{l "Archive this boundary"}</div>
            <div class="text-sm text-base-content/80">{l "If you no longer want to use this boundary, but still want existing permissions using it to be preserved."}</div>
          </div>
          <Bonfire.UI.Common.OpenModalLive
            id={Pointers.ULID.generate()} 
            title_text={l("Archive this boundary")}
            >
            {l "The boundary will be permanently archived and no longer appear in your list of boundaries."} 
            <:open_btn>
              <div class="normal-case btn btn-outline btn-warning btn-sm">{l "Archive"}</div>
            </:open_btn>
            <:action_btns>
              <button 
                data-id="archive_boundary"
                type="button" 
                :on-click="Bonfire.Boundaries:acl_soft_delete" 
                phx-value-go="/boundaries/acls"
                class="normal-case btn btn-outline btn-warning btn-sm">
                <span class="text-left truncate ellipsis">{l("Archive this boundary")}</span>
              </button>
            </:action_btns>
          </Bonfire.UI.Common.OpenModalLive>
        </div> -->

          <div class="flex items-center space-x-8">
            <div class="flex flex-col">
              <div class="flex-1 text-base font-bold">{l("Delete this boundary")}</div>
              <div class="mt-2 text-sm text-base-content/80">{l(
                  "Deleting a boundary means anything shared with users of the local instance using this boundary will no longer be shared. Please be certain."
                )}</div>
            </div>
            <Bonfire.UI.Common.OpenModalLive
              id={Pointers.ULID.generate()}
              title_text={l("Delete this boundary")}
            >
              {l(
                "The boundary will be permanently deleted. This action will affect everything that was shared on the local instance using the boundary."
              )}
              <:open_btn>
                <div class="normal-case btn btn-outline btn-error btn-sm">{l("Delete")}</div>
              </:open_btn>
              <:action_btns>
                <button
                  data-id="delete_boundary"
                  type="button"
                  :on-click="Bonfire.Boundaries:acl_delete"
                  phx-value-go="/boundaries/acls"
                  class="normal-case btn btn-error btn-sm"
                >
                  <span class="text-left truncate ellipsis">{l("Delete this boundary")}</span>
                </button>
              </:action_btns>
            </Bonfire.UI.Common.OpenModalLive>
          </div>
        </div>
      </section>
    </div>

    <style>
      .boundaries-switches label div.btn {
      color: hsl(var(--bc));
      }
      .boundaries-switches label input:checked ~ div.btn-yes {
      background: hsl(var(--su) / 0.90);
      }
      .boundaries-switches label input:checked ~ div.btn-no {
      background: hsl(var(--er) / 0.90);
      }
      .boundaries-switches label input:checked ~ div.btn-maybe {
      background: white;
      color: black;
      }
    </style>
  {/if}
</div>
