<div class="px-4 py-6 sm:p-6 lg:pb-8">
  <div class="sticky top-0">
    <div class="mt-6">
      <div class="flex items-center border-b-4 pb-10">
        <!-- <div class="shadow-2xl ring-4 ring-white flex-shrink-0 flex items-center justify-center w-24 h-24 rounded-full bg-pink-600 text-white text-sm font-medium">
            GA
        </div> -->
        <div class="ml-4 flex flex-col">
            <h3 class="text-2xl font-bold text-base-content opacity-80">{ e(@circle, :named, :name, nil) || e(@circle, :stereotyped, :named, :name, nil) || l "Untitled circle" }</h3>
            <!-- <p class="text-base font-regular text-base-content opacity-80 mt-1">This is a sample description to help remember what this circle is about.</p> -->
            <div :if={!e(@circle, :stereotyped, nil)} class="flex items-center mt-3 space-x-3">
              <button :on-click="Bonfire.Boundaries:circle_delete" class="btn btn-primary w-max inline-flex items-center"><Solid.TrashIcon />{l "Delete circle"}</button>
            </div>
        </div>
      </div>
    </div>
  </div>
  <div class="mt-8">

  <div class="block"x-cloak  x-data="{ adding: false, removing: false }">

    <h3 class="font-sm mb-2 text-medium text-base-content opacity-80">Circle Members</h3>
    <div class="overflow-hidden relative border rounded-lg  drag_drop__container__to">
        <form :on-change={if !@read_only, do: "Bonfire.Boundaries:circle_edit"}>
        <input type="hidden" name="circle[id]" value={e(@circle, :id, "")}>
        <input type="hidden" id="circle_changed" name="circle_changed" value="0">

        <ul
            id="circle_members"
            class="grid grid-flow-col grid-cols-5 p-4 gap-4"
            :class="{ 'bg-secondary': adding }"
            x-on:drop="adding = false"
            x-on:drop.prevent="
                target = event.target.closest('ul');
                id = event.dataTransfer.getData('text/plain');
                console.log(id);
                element = document.getElementById(id);
                target.appendChild(element);
                dispatch_change();
            "
            x-on:dragover.prevent="adding = true"
            x-on:dragleave.prevent="adding = false">

             <!-- loop through current circle members  -->

            {#for member <- e(@circle, :encircles, [])}

              <li id={"item-"<> member.id }
                class="p-2 flex"
                :class="{ 'bg-base-2000': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    event.dataTransfer.setData('text/plain', event.target.id);
                "
                x-cloak
                x-on:dragend="dragging = false"
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{member.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{member.id}][subject_id]"} value={e(member, :subject_id, "")}>
                <div class="flex-1">
                  <Bonfire.UI.Me.ProfileItemLive show_controls={[]} profile={e(member, :subject, :profile, nil)} character={e(member, :subject, :character, nil)} />
                </div>
                <div :if={!@read_only} class="flex mr-1">
                  <span
                    class="to flex items-center"
                    @click="move_item(event, 'circle_members')">
                    <Solid.PlusCircleIcon />
                    </span>
                  <span
                    class="from flex items-center"
                    @click="move_item(event, 'circle_suggestions')">
                      <Solid.MinusCircleIcon />
                  </span>
                </div>
              </li>
            {#else}
              <div id="no_members">{l "Nobody in this circle..."}</div>
            {/for}

        </ul>
        </form>

    </div>

  <div :if={!@read_only}>
    <h3 class="font-sm mt-4 mb-2 text-medium text-base-content opacity-80">Suggestions</h3>
    <div class="overflow-hidden relative border rounded-lg drag_drop__container__from">
        <ul
            id="circle_suggestions"
            class="flex flex-col divide-y-2"
            :class="{ 'drag_drop__items__removing': removing }"
            x-on:drop="removing = false"
            x-on:drop.prevent="
                target = event.target.closest('ul');
                element = document.getElementById(event.dataTransfer.getData('text/plain'));
                target.appendChild(element);
                dispatch_change();
            "
            x-on:dragover.prevent="removing = true"
            x-on:dragleave.prevent="removing = false">

             <!-- loop through people that can be added -->

            {#for suggested <- @followed }
              <li id={"item-"<> suggested.id }
                class="p-2 flex"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    id = event.target.id;
                    console.log(id);
                    event.dataTransfer.setData('text/plain', id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{suggested.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{suggested.id}][subject_id]"} value={e(suggested, :edge, :object, :id, "")}>
                <div class="flex-1">
                  <Bonfire.UI.Me.ProfileItemLive show_controls={[]} profile={e(suggested, :edge, :object, :profile, nil)} character={e(suggested, :edge, :object, :character, nil)} />
                </div>
              
                <div :if={!@read_only} class="flex mr-1">
                  <span
                    class="to flex items-center button"
                    @click="move_item(event, 'circle_members')">
                      <Solid.PlusCircleIcon /> 
                    </span>
                  <span
                  class="from flex items-center button"
                  @click="move_item(event, 'circle_suggestions')">
                    <Solid.MinusCircleIcon /> 
                  </span>
                </div>
              </li>
            {/for}

            {#for suggested <- @followers }
              <li id={"item-"<> suggested.id }
                class="p-2 flex"
                :class="{ 'drag_drop__iter__dragging': dragging }"
                x-on:dragstart.self="
                    dragging = true;
                    event.dataTransfer.effectAllowed='move';
                    id = event.target.id;
                    console.log(id);
                    event.dataTransfer.setData('text/plain', id);
                "
                x-on:dragend="dragging = false"
                x-cloak
                x-data="{ dragging: false }"
                draggable="true">

                <input type="hidden" name={"circle[encircle][#{suggested.id}][circle_id]"} value={e(@circle, :id, "")}>
                <input type="hidden" name={"circle[encircle][#{suggested.id}][subject_id]"} value={e(suggested, :edge, :subject, :id, "")}>
                <div class="flex-1">
                  <Bonfire.UI.Me.ProfileItemLive show_controls={[]} profile={e(suggested, :edge, :subject, :profile, nil)} character={e(suggested, :edge, :subject, :character, nil)} />
                </div>
                
                <div :if={!@read_only} class="flex mr-1">
                  <span
                    class="to flex items-center button"
                    @click="move_item(event, 'circle_members')">
                      <Solid.PlusCircleIcon /> 
                    </span>
                  <span
                  class="from flex items-center button"
                  @click="move_item(event, 'circle_suggestions')">
                    <Solid.MinusCircleIcon /> 
                  </span>
                </div>

              </li>

            {#else}
              <li id="no_suggestions" class="p-2">{l "Follow some people first..."}</li>
            {/for}

        </ul>
        
    </div>
  </div>
</div>

<style>
.drag_drop__container__to span.to, .drag_drop__container__from span.from  {
  display: none;
}
</style>
<script>
function move_item(event, target_id){
  target = document.getElementById(target_id);
  console.log(target)
  element = event.target.closest('li');
  console.log(element)
  target.appendChild(element);
  dispatch_change();
}

function dispatch_change(){
  const up = document.getElementById('circle_changed');
  //up.value = up.value + 1;
  const createEvent = function(name) { // tell LV that the form changed
    e = document.createEvent('Event');
    e.initEvent(name, true, true);
    return e;
  }
  up.dispatchEvent(createEvent('input'));
}
</script>

  </div>
</div>


