<div class="">
  <div class="p-3">
    <!-- <div class="flex items-center justify-center flex-shrink-0 w-24 h-24 text-sm font-medium text-white bg-pink-600 rounded-full shadow-2xl ring-4 ring-white">
        GA
    </div> -->
    <div class="flex items-center">
        <div class="flex items-center flex-1 space-x-2 text-xl font-bold text-base-content">

          <div 
            :if={e(assigns, :parent_back, nil)} 
            phx-click="back"
            phx-target={e(assigns, :parent_back, nil)}
            class="btn btn-ghost btn-sm btn-circle" > 
            <Solid.ChevronLeftIcon class="w-6 h-6 text-base-content/80" />
          </div>

          <!-- <Solid.LockClosedIcon class="w-6 h-6 text-base-content/80" /> -->
          <div>{ e(@acl, :named, :name, nil) || e(@acl, :stereotyped, :named, :name, nil) || l "Untitled Acl" }</div>
        </div>
        <LivePatch
          to={"/settings/acl/#{ulid(@acl)}/settings"}
          class="text-sm font-medium link">
          {l "Settings"}
        </LivePatch>
        <!-- <p class="mt-1 text-base font-regular text-base-content/80">{l "This is a sample description to help remember what this boundary is about."}</p> -->
    </div>
  </div>

  <div class="">
    <div :if={@section=="permissions"}>
      <div class="p-3 border-t border-b bg-base-content/5 border-base-content/10">
        <div class="text-xs font-semibold uppercase text-base-content/70">{l "Users and circles that belong to this boundary"}</div>
        <div class="flex items-center mt-3 space-x-2">
          <span 
            :for={subject <- @subjects}
            class="flex items-center space-x-1 badge-lg badge badge-outline">
            <span class="text-sm">{e(subject, :named, :name, nil) || e(subject, :stereotyped, :named, :name, nil) || e(subject, :profile, :name, nil) || e(subject, :character, :username, nil) || e(subject, :name, nil) || ulid(subject)}</span>
            <span 
              :if={!@read_only} 
              phx-click="Bonfire.Boundaries:remove_from_acl"
              phx-value-subject_id={ulid(subject)}
              phx-target={@myself}
              class="btn btn-ghost btn-xs">
              <Solid.XIcon class="w-4 h-4 stroke-current" />
            </span>
          </span>
        </div>

        <div :if={!@read_only}>
          <div class="flex items-center rounded-lg">
            <form 
              class="flex-1"
              phx-change="ignore"
              :on-change="add">
              <div
                class="flex-1"
                id={:select_more}
                phx-hook="InputOrSelectOne"
                >
                <input placeholder={l "Add more users or circles"} name="add" class="w-full h-10 mt-3 rounded-full tagify input input-bordered" />
                <select class="tagify hide !text-slate-800">
                  {#for {id, name} <- @suggestions}
                    <option class="!text-slate-800" value={id}>{ name }</option>
                  {/for}
                </select>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div 
        :if={Enum.count(e(@subjects, []))>0}
        class={"grid w-full grid-cols-3 gap-3 p-3"}>

        {#for {{verb_id, l}, i} <- Enum.with_index(e(@list, []))}   
        <div class={"col-span-1 border border-base-content/30 rounded"}>

          <div class={"flex-1 text-sm font-semibold rounded "}>
            <div class="flex items-center p-2 space-x-2">
              <span>
                <Surface.Components.Dynamic.Component 
                  module={e(l, :verb, :icon, Solid.QuestionMarkCircleIcon)}
                  class="w-4 h-4"
                  fill={"currentColor"}
                />
              </span>
              <div class="flex-1">
                {e(l, :verb, :verb, nil) || e(l, :verb, nil)}
              </div>
            </div>
          </div>

          <div 
            :for={%{id: subject_id} = subject <- e(@subjects, [])}
            class={"flex items-center px-2 py-1 mt-px "}>
            <span class="flex-1 pr-2 text-sm truncate ellipsis">
              {e(subject, :named, :name, nil) || e(subject, :stereotyped, :named, :name, nil) || e(subject, :profile, :name, nil) || e(subject, :character, :username, nil) || e(subject, :name, nil) || subject_id}
            </span>
            <div class="flex items-center space-x-1">
              <form :on-change="edit_grant" class="boundaries-switches">
                <label class="w-[27px] mx-auto text-center">
                  <input 
                    class="absolute opacity-0" 
                    name={"subject[#{subject_id}][#{verb_id}]"} 
                    type="radio" 
                    value="1"
                    checked={Map.get(e(l, :subject_grants, subject_id, %{}), :value, nil)==true} 
                    disabled={@read_only}
                    />
                  <div 
                    class={"btn btn-sm btn-outline btn-circle btn-yes",
                    "btn-disabled": @read_only}>
                    <Boxicon.Regular.CheckShield class="w-4 h-4" />
                  </div>
                </label>
                <label class="w-[27px] mx-auto text-center">
                  <input 
                    class="absolute opacity-0" 
                    name={"subject[#{subject_id}][#{verb_id}]"} 
                    type="radio" 
                    value=""
                    checked={is_nil(Map.get(e(l, :subject_grants, subject_id, %{}), :value, nil))} 
                    disabled={@read_only}
                    />
                  <div 
                    class={"btn btn-sm btn-outline btn-circle btn-maybe",
                    "btn-disabled": @read_only}>
                    <Boxicon.Regular.Shield class="w-4 h-4" />
                  </div>
                </label>
                <label class="w-[27px] mx-auto text-center">
                  <input 
                    class="absolute opacity-0" 
                    name={"subject[#{subject_id}][#{verb_id}]"} 
                    type="radio" 
                    value="0"
                    checked={Map.get(e(l, :subject_grants, subject_id, %{}), :value, nil)==false} 
                    disabled={@read_only}
                    />
                  <div 
                    class={"btn btn-sm btn-outline btn-circle btn-no",
                    "btn-disabled": @read_only}>
                    <Boxicon.Regular.ShieldX class="w-4 h-4" />
                  </div>
                </label>
              </form>
            </div>
          </div>  
        </div>
        {/for}
      </div>
      <!-- <div class="flex justify-end p-2 bg-base-200">
        <button 
          type="button" 
          class="normal-case btn btn-primary btn-sm btn-wide" 
          @click="open_boundaries = false">
          {l "Save"}
        </button>
      </div> -->
    </div>
    <section
      :if={@section=="settings"}
      class="p-4"
    >
    test
    </section>
  </div>


<style>
.boundaries-switches label div.btn {
  color: hsl(var(--bc));
}
.boundaries-switches label input:checked ~ div.btn-yes {
  background: hsl(var(--su) / 0.90);
}
.boundaries-switches label input:checked ~ div.btn-no {
  background: hsl(var(--er) / 0.90);
}
.boundaries-switches label input:checked ~ div.btn-maybe {
  background: white;
  color: black;
}
</style>


</div>

