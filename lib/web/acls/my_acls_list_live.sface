<div>

{#if e(assigns, :edit_acl_id, nil)}

  <Bonfire.Boundaries.Web.AclLive
    id={e(assigns, :edit_acl_id, nil)} 
    acl_id={e(assigns, :edit_acl_id, nil)} 
    current_user={current_user(assigns)}
    parent_back={@myself}
  />

{#else}

  <ul class="flex flex-col p-2 space-y-2"> 
    {#for acl <- e(assigns, :acls, []) ++ e(assigns, :built_ins, [])  }

      <li class={
        "p-2 border rounded bg-base-content/5 hover:bg-base-content/10 border-base-content/30",
        "border-primary bg-primary/10 border-2": Enum.map(e(assigns, :to_boundaries, []), fn b -> elem(b, 1) end) |> Enum.member?(e(acl, :named, :name, nil) || e(acl, :stereotyped, :named, :name, nil) || l "Untitled")
        }>
        <label 
          class="flex items-center w-full" 
          phx-click={if @select_event, do: JS.push(@select_event, value: %{id: acl.id, name: (e(acl, :named, :name, nil) || e(acl, :stereotyped, :named, :name, nil) || l "Untitled")}, target: "#smart_input")}>
          <div class="flex-1">
            <div class="flex items-center space-x-2">
              <span class="text-xl" aria-label="boundary icon">{e(acl, :extra_info, :info, :icon, "ðŸ›¡")}</span>
              <div class="text-base font-semibold">{ e(acl, :named, :name, nil) || e(acl, :stereotyped, :named, :name, nil) || l "Untitled" }</div>
            </div>
            <!-- <div class="text-sm text-base-content/80">
              {if e(acl, :grants_count, nil), do: "#{e(acl, :grants_count, 0)} permissions"} 
              {if e(acl, :controlled_count, nil), do: "#{e(acl, :controlled_count, 0)} uses"} 
            </div> -->
          </div>
          <!-- ACTIONS -->
          <div class="flex space-x-2">
            <LiveRedirect 
              :if={!@ui_for_setting_boundaries}
              class="btn btn-ghost btn-sm btn-circle"
              to={"/settings/acl/"<>acl.id}
            >
              {#case Acls.is_stereotype?(acl)}
              {#match true}
                <Outline.InformationCircleIcon class="w-5 h-5" />
              {#match _}
                <Solid.PencilIcon class="w-4 h-4" />
              {/case}
            </LiveRedirect>
            <div 
              :if={@ui_for_setting_boundaries}
              class="btn btn-ghost btn-sm btn-circle"
              phx-click="boundary_edit" 
              phx-target={@myself}
              phx-value-id={acl.id}
            >
              {#case Acls.is_stereotype?(acl)}
              {#match true}
                <Outline.InformationCircleIcon class="w-5 h-5" />
              {#match _}
                <Solid.PencilIcon class="w-4 h-4" />
              {/case}
            </div>
            <div 
              :if={@ui_for_setting_boundaries}
              class="btn btn-outline btn-sm btn-circle opacity-80">
              <Solid.PlusIcon class="w-5 h-5 " />
            </div>
          </div>
        </label>
        {#if e(acl, :grants_count, 0)>0}
          {#for {_subject_id, %{subject: subject, verb_grants: verb_grants}} <- AclLive.subject_verb_grant(e(acl, :grants, [])) |> Enum.slice(0..5)}
            <div class="flex justify-between p-2 pb-0 mt-2 -mx-2 text-sm border-t border-base-content/30">
              <span>{e(subject, :named, :name, nil) || e(subject, :stereotyped, :named, :name, nil) || e(subject, :name, nil) || e(subject, :profile, :name, nil) || e(subject, :character, :username, nil) || ulid(subject)}</span>
              <div class="flex items-center space-x-1">
                {#for {verb_id, grant} <- verb_grants}
                  {#case Bonfire.Boundaries.Verbs.get(verb_id)}
                    {#match nil}
                    {#match verb}
                      <div 
                        class={
                          "flex items-center normal-case btn btn-outline place-content-center btn-xs btn-square tooltip tooltip-top cursor-normal",
                          "btn-success": Map.get(grant, :value),
                          "btn-error": !Map.get(grant, :value)}
                        data-tip={(if Map.get(grant, :value), do: l("Can"), else: l("Cannot"))<>" "<>e(verb, :verb, "")}>
                          <Surface.Components.Dynamic.Component 
                            module={e(verb, :icon, Solid.QuestionMarkCircleIcon)}
                            class="w-4 h-4"
                            fill={"currentColor"}
                          />
                      </div>
                  {/case}
                {/for}
              </div>
            </div>
          {/for}
        {/if}
      </li>
      
    {/for}
  </ul>

  
{/if}
</div>